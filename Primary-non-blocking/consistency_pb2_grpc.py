# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import consistency_pb2 as consistency__pb2


class Server_RegServerStub(object):
  """The service definition format $Client$Server

  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.Register = channel.unary_unary(
        '/consistency.Server_RegServer/Register',
        request_serializer=consistency__pb2.Server.SerializeToString,
        response_deserializer=consistency__pb2.ServerRegResponse.FromString,
        )


class Server_RegServerServicer(object):
  """The service definition format $Client$Server

  """

  def Register(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_Server_RegServerServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'Register': grpc.unary_unary_rpc_method_handler(
          servicer.Register,
          request_deserializer=consistency__pb2.Server.FromString,
          response_serializer=consistency__pb2.ServerRegResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'consistency.Server_RegServer', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class RegServer_ServerStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.AddReplica = channel.unary_unary(
        '/consistency.RegServer_Server/AddReplica',
        request_serializer=consistency__pb2.Server.SerializeToString,
        response_deserializer=consistency__pb2.Void.FromString,
        )


class RegServer_ServerServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def AddReplica(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_RegServer_ServerServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'AddReplica': grpc.unary_unary_rpc_method_handler(
          servicer.AddReplica,
          request_deserializer=consistency__pb2.Server.FromString,
          response_serializer=consistency__pb2.Void.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'consistency.RegServer_Server', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class Client_RegServerStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.GetServerList = channel.unary_stream(
        '/consistency.Client_RegServer/GetServerList',
        request_serializer=consistency__pb2.Void.SerializeToString,
        response_deserializer=consistency__pb2.Server.FromString,
        )


class Client_RegServerServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def GetServerList(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_Client_RegServerServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'GetServerList': grpc.unary_stream_rpc_method_handler(
          servicer.GetServerList,
          request_deserializer=consistency__pb2.Void.FromString,
          response_serializer=consistency__pb2.Server.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'consistency.Client_RegServer', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class Client_ServerStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.Write = channel.unary_unary(
        '/consistency.Client_Server/Write',
        request_serializer=consistency__pb2.WriteRequest.SerializeToString,
        response_deserializer=consistency__pb2.WriteResponse.FromString,
        )
    self.Read = channel.unary_unary(
        '/consistency.Client_Server/Read',
        request_serializer=consistency__pb2.ReadRequest.SerializeToString,
        response_deserializer=consistency__pb2.ReadResponse.FromString,
        )
    self.Delete = channel.unary_unary(
        '/consistency.Client_Server/Delete',
        request_serializer=consistency__pb2.DeleteRequest.SerializeToString,
        response_deserializer=consistency__pb2.DeleteResponse.FromString,
        )
    self.Block = channel.unary_unary(
        '/consistency.Client_Server/Block',
        request_serializer=consistency__pb2.Void.SerializeToString,
        response_deserializer=consistency__pb2.Void.FromString,
        )
    self.Unblock = channel.unary_unary(
        '/consistency.Client_Server/Unblock',
        request_serializer=consistency__pb2.Void.SerializeToString,
        response_deserializer=consistency__pb2.Void.FromString,
        )


class Client_ServerServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def Write(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Read(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Delete(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Block(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Unblock(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_Client_ServerServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'Write': grpc.unary_unary_rpc_method_handler(
          servicer.Write,
          request_deserializer=consistency__pb2.WriteRequest.FromString,
          response_serializer=consistency__pb2.WriteResponse.SerializeToString,
      ),
      'Read': grpc.unary_unary_rpc_method_handler(
          servicer.Read,
          request_deserializer=consistency__pb2.ReadRequest.FromString,
          response_serializer=consistency__pb2.ReadResponse.SerializeToString,
      ),
      'Delete': grpc.unary_unary_rpc_method_handler(
          servicer.Delete,
          request_deserializer=consistency__pb2.DeleteRequest.FromString,
          response_serializer=consistency__pb2.DeleteResponse.SerializeToString,
      ),
      'Block': grpc.unary_unary_rpc_method_handler(
          servicer.Block,
          request_deserializer=consistency__pb2.Void.FromString,
          response_serializer=consistency__pb2.Void.SerializeToString,
      ),
      'Unblock': grpc.unary_unary_rpc_method_handler(
          servicer.Unblock,
          request_deserializer=consistency__pb2.Void.FromString,
          response_serializer=consistency__pb2.Void.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'consistency.Client_Server', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
